#include<bits/stdc++.h>
using namespace std;
using ll=long long int;
ll flag=1;
bool a[100001]={0};//cat presence
bool b[100001]={0};// visited 
ll x[100001];
vector <ll> adj[100001];
ll ans=0;
void DFS ( ll s,ll m)
{  
      b[s]=1;
      for (auto i : adj[s])
      {     
           if(b[i]==0)
           {  
             if(a[s]!=0)
               x[i]=a[i]+x[s];
             else
               x[i]=a[i];
             if(x[i]<=m)
               DFS(i,m);
           }         
      }
      if(adj[s].size()==1 && x[s]<=m && s!=1)
      ans++;
}
int main()
{
  ll n,m;
  cin>>n>>m;
  a[0]=0;  // no . of vertices and queries
  for(ll i=1;i<=n;i++)
  cin>>a[i];
  for (ll i=1;i<n;i++)
  {
    ll u,v;
    cin>>u>>v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  if(a[1]==1)
  x[1]=1;
  DFS(1,m);
  cout<<ans<<endl;
  return 0;
} 
